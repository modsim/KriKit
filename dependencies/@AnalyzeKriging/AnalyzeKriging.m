classdef AnalyzeKriging<handle
% Copyright 2014-2016: Lars Freier, Eric von Lieres
% See the license note at the end of the file.
    
    %% Private Members
    properties(GetAccess='public',SetAccess='public')
        KrigingObjects = cell(0);
    end
    %% Protected Members
    properties(GetAccess='protected',SetAccess='protected')
        % Save Interpolation data
        KrigingPrediction_InterpolationnD = cell(0);
        % Save Interpolation data
        KrigingPrediction_Interpolation3D = cell(0);
        % Save Interpolation data
        KrigingPrediction_Interpolation2D = cell(0);
        % Save Interpolation data
        KrigingPrediction_Screening = cell(0);

        %% General Kriging Properties
        KrigingObjectNames = {};
        KrigingObjectTypes = [];
        InputVarNames = cell(1);
        % Number of Kriging objects in the AnalyKriging object
        nKrigingObjects = 0;
        %% Plot
        % Suppress Figure for example in the case of make3dMovie
        SuppressFigure=0;
        % Decide how many point of each input variable shall tested
        Accuracy = 100;
        AccuracyOutput = 100;
        % Decide if only the basis function should be plotted
        ShowBasisFct = 0;
        % Plot Lower and Upper Bounds (1) or not (0)
        ShowBounds = 1;
        % Plot provided data (1) or not (0)
        ShowData   = 1;
        % Set UseSolver-Variable for all kriging objectives
        UseSolver = 1;
        % Decide if pareto points shall be conneted by rectangles indicating
        % range of pareto optimality
        ShowParetoRectangles = true;
        % If WriteNumbers=1 then the pareto points are numerated
        WriteNumbers=0;
        % nNewSamples is the number of samples points which shall be
        % calculated for the next round based on the expected improvements
        nNewSamples = 1;
        % AlphaValue [0,...,1] 0 = total transparency, 1 = no transparency
        AlphaValue = 0.8;
        % Define the width of the confidence interval which is drawn in the
        % 2D and 3D interpolation. 
        % LB/UB = meanValue +/- WidthConfidenceInterval*standardDeviation
        WidthConfidenceInterval = 1;
        % Number of Sample points which have to be in plot. This variable
        % is used e.g. in the function calcAndPlotInterpolation_3D_BestChoice
        % since here the criterion of choice is that the plot should
        % contain at least "nMinimumDataPoint"-Data points.
        % If "nMinimumDataPoint"<0 ... only the plot with the highest
        % number of data points are chosen
        nMinimumDataPoint = -1;
        % Contains the chosen combination of input variables which are used
        % the plots e.g. in "calcAndPlotInterpolation_3D_BestChoice"
        ChosenCombinationsForPlot = [];
        % Determines the number of levels shown as lines in a contour plot
        nContourLevels = 10;
        % Adjusting of smootness when point of interest lies otuside of
        % defined range
        ScaleFactorMutalPrediction = 1e-4;
        %% Pareto
        % Save input values of pareto optimal points generated by
        % determineParetoSet 
        ParetoSetExperiments = cell(0);
        % Number of pareto optimal points
        nParetoSetExperiments = 0;
        % Save input values of pareto optimal points generated by
        % determineParetoSet 
        ParetoValuesInput  = cell(0);
        % Vector which contains for each kriging objective 1 or -1 when the
        % optimization goal is maximization or minimization, respectively.
        % By default minimization
        MinMax = [-1,-1];
        % Decide if z-test shall be done w.r.t best sample value. If false,
        % z-test is done w.r.t best interpolation value (default false)
        UseDataPointsAsComparisonPoint = false;
        % Signifcance level (error Erro Type I) used for z-test
        SignificanceLevel = 0.05;
        % Used for the contour plot in order to defined a minimum value
        % which is plotted. This prevents that the entrie plot is colored
        ThresholdQuantile = -inf;
        %% Interpolation Options
        % Subplot contains nPlots X nPlots figures
        nPlots =5;
        % ShowColorBar=1 ... Shows a colorbar of the contour plots
        ShowColorBar = true;
        % NormColors = true ... colormap is adjust so that the colors in all
        % figures in one subplots represent the same numbers
        NormColors = true;
        % FontSize = 20 ... modifies the size of the font on the axis
        FontSize = 20;
        % LBInputVarInterpolation is an nKrigingObject x 1 Array. It
        % contains the low bound of Kriging object i used for the
        % interpolation. 
        LBInputVarInterpolation = {};
        % UBInputVarInterpolation is an nKrigingObject x 1 Array. It
        % contains the low bound of Kriging object i used for the
        % interpolation. 
        UBInputVarInterpolation = {};
        %% MakeMovieAnalysis
        % Since some input variables are not continously consider in methods 
        % such as make3DMovieAnalysis,calcScreeningAnalysis, 
        % they have to be fixed at a referece
        % point.
        ReferencePoint = [];
        % This point is need for the calculation of the hyper volume (Pareto Optimality)
        ReferencePointHyperVolume = [];
        % Used in methods such as make3DMovieAnalysis. At least on input
        % parameter which in not plottet on the x- or -y-axis has to be
        % varied during the movie. "VaryingInputVar" contains the indices
        % of these input variables
        VaryingInputVar = [];
        % Used in methods such as make3DMovieAnalysis. Defines the fram rate
        % of the created movie
        FrameRate = 1;
        % Defines the intermediate steps which took be taken in order to
        % come from the lower bound to the upper bound
        nStepsBetweenBounds = 1;
        % Used in methods such as make3DMovieAnalysis. Contains a string
        % which defines the output name of the file produced by the
        % particular method
        FileName = {};
        % Used in methods such as make3DMovieAnalysis. "plottingRange" is 2D-array
        % and contains the range of the z-axis which keeps static over 
        % several images  
        PlottingRange =[];
        %% ANOVA 
        % Contain the polynomial coefficient calculated during the
        % ANOVA-Analysis
        ANOVACoefficients = [];
        % Contain the covariance of the polynomial coefficient calculated
        % during the ANOVA-Analysis
        ANOVACovMatrix = [];
        % Contain the standard deviation of the polynomial coefficient
        % calculated during the ANOVA-Analysis
        ANOVAStdOfCoefficients = [];
        % Contain the t-value for t-test in order to decide which of the
        % polynomial coefficient differ significantly from zero
        ANOVATvalue = [];
        % Contain the p-value for t-test in order to decide which of the
        % polynomial coefficient differ significantly from zero. Ususally
        % values lower than 0.05 represent significant coefficients
        ANOVAPvalue = [];
        % Analyse Choice of Basis Fct
        LeastSquareErrorBasisFctvsKriging = -1;
        % Used in plot PredictionVsOutput
        OutsideOfConfi = 0;
        % Contains the values of the input data which have the potential to
        % be outlier (out of confidence tube)
        PotentialOutlier = [];
        % Contains the a binary if an output data value has the potential
        % to be an outlier (out of confidence tube)
        PotentialOutlierBinary
        % Contains the distance to the prediction value of potential
        % outliers stored in "PotentialOutlier" which have the potential to
        % be outlier (out of confidence tube)
        PotentialToBeOutlier = [];
        % ShowOutlier in 2D and 3D plot
        ShowOutlier = false;
        % Based on the concept of generalized expected improvement,
        % DegreeOfExpectedImprovement characterizes the degree of global
        % search (the bigger the "more" is the search). 
        % By default DegreeOfExpectedImprovement=1
        DegreeOfExpectedImprovement = 1;
        % Indicator for prediction uncertainity of pareto front estimation
        GlobalParetoUncertainity = -inf;
        % Indicator for prediction uncertainity of pareto front estimation,
        % normalized by Hypervolume of both, expected Pareto front and
        % realization points
        GlobalParetoUncertainityNorm = -inf;
        % Number of Links which are calculated in the Markov Chain
        nMCMCLinks = 0;
        % Number of Links which are calculated in the Markov Chain for
        % calculating expected improvement of multiobjective problems
        % (nObj>=4)
        nMCMCLinksEI = 0;
        % Matrix (nLevelX3) containing the color map used for plots like 3D
        % interpolation
        ColormapToolbox = [];
        %% Prediction of Pareto Front
        RepeatDesign = true;
    end
    methods
        %% Constructor
        function obj = AnalyzeKriging()
            obj.ColormapToolbox = load('ColormapWinterInverse.txt');
        end
        
        %% General Methods
        % ----------------------------------------------------------------
        function copy = copyObj(obj)
        % Create a shallow copy of the calling object.
            copy = eval(class(obj));
            meta = eval(['?',class(obj)]);
            for p = 1: size(meta.Properties,1)
                    pname = meta.Properties{p}.Name;
                try
                    eval(['copy.',pname,' = obj.',pname,';']);
                catch
                    error(['\nCould not copy ',pname,'.\n']);
%                     fprintf(['\nCould not copy ',pname,'.\n']);
                end
            end
        end
        % ----------------------------------------------------------------
        []=addKrigingObject(obj,KrigingType,KrigingObjectName)
        % ----------------------------------------------------------------
        []=removeKrigingObject(obj,Indices)
        % ----------------------------------------------------------------
        []=resetKrigingObject(obj,Indices)
        % ----------------------------------------------------------------
        [] = defineBoundOfInputVar(obj,varargin)
        % ----------------------------------------------------------------
        [predictionMatrix]=doMututalPrediction(obj,varargin)
        % ----------------------------------------------------------------
        [inputData,indexValid]=plotOptimum3D(obj,varargin)
        % ----------------------------------------------------------------
        [inputData,indexValid]=plotOptimum2D(obj,varargin)
        % ----------------------------------------------------------------
        [inputData,indexValid]=plotOptimum23D(obj,varargin)
        % ----------------------------------------------------------------
        [inputData,indexValid]=doTestForOptimality(obj,varargin)
        % ----------------------------------------------------------------
        [indicesOfKrigingObjects] = checkKrigingIndizes(obj,varargin)
        % ----------------------------------------------------------------
        [weights] = calcWeightsForMutualPrediciton(obj,pointOfInterest,lb,ub)
        % ----------------------------------------------------------------
        [KrigingObjectIndex,InputVar1,InputVar2,RemainingIndices,RemainingValues] = checkInputInterpolation3D(obj,varargin)
        % ----------------------------------------------------------------
        [KrigingObjectIndex,InputVar1,InputVar2,RemainingIndices,RemainingValues] = checkInputInterpolation(obj,varargin)
        % ----------------------------------------------------------------
        []=calcInterpolation_3D(obj,varargin)
        % ----------------------------------------------------------------
        []=calcAndPlotInterpolation_3D_BestChoice(obj,varargin)
        % ----------------------------------------------------------------
        []=evaluateBasisFunction(obj,varargin)
        % ----------------------------------------------------------------
        function []=plotInterpolation_3D(obj,KrigingObjectIndex)
            % []=plotInterpolation_3D(KrigingObjectIndex)
            %
            % For further Details see documentation of "plotInterpolation_23D()"
            %
            obj.plotInterpolation_23D(KrigingObjectIndex,3);
        end
        % ----------------------------------------------------------------
        [isInInvestigatedSection]=findIndicesOfDataForPlot(obj,KrigingObjectIndex,Data)
        % ----------------------------------------------------------------
        calcMutualInterpolation_23D(obj,varargin);
        % ----------------------------------------------------------------
        []=calcInterpolation_2D(obj,varargin)
        % ----------------------------------------------------------------
        []=calcAndPlotInterpolation_23D_BestChoice(obj,varargin)
        % ----------------------------------------------------------------
        []=calcAndPlotInterpolation_2D_BestChoice(obj,varargin)
        % ----------------------------------------------------------------
        plotInterpolation_23D(obj,varargin)
        % ----------------------------------------------------------------
        [Data,dataShown,OutlierShown] = determineRelevantDataPointsForPlot(obj,varargin)
        % ----------------------------------------------------------------
        labelPlots_23D(obj,varargin);
        % ----------------------------------------------------------------
        function []=plotInterpolation_2D(obj,KrigingObjectIndex)
        % []=plotInterpolation_2D(KrigingObjectIndex)
        %
        % For further Details see documentation of "plotInterpolation_23D()"
        %
              obj.plotInterpolation_23D(KrigingObjectIndex,2);
        end
        % ----------------------------------------------------------------
        function []=plotExpectedImprovement_2D(obj,KrigingObjectIndex)
        % []=plotExpectedImprovement_2D(KrigingObjectIndex)
        %
        % For further Details see documentation of "plotInterpolation_23D()"
        %
              obj.plotInterpolation_23D(KrigingObjectIndex,2,true);
        end
        % ----------------------------------------------------------------
        function []=plotExpectedImprovement_3D(obj,KrigingObjectIndex)
        % []=plotExpectedImprovement_3D(KrigingObjectIndex)
        %
        % For further Details see documentation of "plotInterpolation_23D()"
        %
              obj.plotInterpolation_23D(KrigingObjectIndex,3,true);
        end
        % ----------------------------------------------------------------
        [expectedParetoCurve,deviationParetoCurve,pCover,gridOriginal] = predictParetoCurve(obj,varargin)
        % ----------------------------------------------------------------
        plotParetoFront(obj,varargin);
        % ----------------------------------------------------------------
        plotParetoFrontData(obj,varargin)
        % ----------------------------------------------------------------
        [PearsonCoeff,SumOfSquares] = plotQuantilPlot(obj,varargin)
        % ----------------------------------------------------------------
        plotParetoInput(obj,varargin)
        % ----------------------------------------------------------------
        [ExpectedImprovement]=calcExpectedImprovement(obj,varargin)
        % ----------------------------------------------------------------
        [ExpectedImprovement] = calcExpectedImprovementMainPart(obj,varargin)
        % ----------------------------------------------------------------
        [uniqueRows,countUniqueRows]=getUniqueInputVarCombinations(obj,varargin)
        % ----------------------------------------------------------------
        [] = make3dMovieAnalysis(obj,varargin)
        % ----------------------------------------------------------------
        [] = calcScreeningAnalysis(obj,varargin);
        % ----------------------------------------------------------------
        [] = plotScreeningAnalysis(obj,varargin);
        % ----------------------------------------------------------------
        []=determineParetoSet(obj,varargin)
        % ----------------------------------------------------------------
        function [] = plotScreeningAnalysisKrigingInterpolation(obj,varargin)
        % [] = plotScreeningAnalysisKrigingInterpolation(obj,KrigingObjectIndex)
        %
        % This function generates a screening plot where contour levels are
        % associated Kriging prediction.
        %
        % For further details documentation of "plotScreeningAnalysis()"
            

            plotScreeningAnalysis(obj,varargin{1},'KrigingInterpolation')
        end
        % ----------------------------------------------------------------
        function [] = plotScreeningAnalysisExpectedImprovement(obj,varargin)
        % [] = plotScreeningAnalysisExpectedImprovement(obj,KrigingObjectIndex)
        %
        % This function generates a screening plot where contour levels are
        % associated expected improvement.
        %
        % For further details documentation of "plotScreeningAnalysis()"

            plotScreeningAnalysis(obj,varargin{1},'ExpectedImprovement')
        end
        % ----------------------------------------------------------------
        [] = findPotentialOutlier(obj,varargin)
        % ----------------------------------------------------------------
        [ExpectedImprovement]=calcExpectedImprovement_MO(obj,varargin)
        % ----------------------------------------------------------------
        [PearsonCoeff] = plotOutputvsPrediction(obj,varargin)
        % ----------------------------------------------------------------
        [] = calcInterpolation_nD(obj,varargin);
        % ----------------------------------------------------------------
        [] = plotInterpolation_nD(obj,varargin)
        % ----------------------------------------------------------------
        [EI] = calcEIMO_MCMC(obj,paretoSet,refPoint,estimationMean,estimationSD)
        %% Get Functions
        % ----------------------------------------------------------------
        function [KrigingObjectNames]=getKrigingObjectNames(obj)
            KrigingObjectNames = obj.KrigingObjectNames;
        end
        % ----------------------------------------------------------------
        function [KrigingObjectTypes]=getKrigingObjectTypes(obj)
            KrigingObjectTypes = obj.KrigingObjectTypes;
        end
        % ----------------------------------------------------------------
        function [Accuracy]=getAccuracy(obj)
            Accuracy = obj.Accuracy;
        end
        % ----------------------------------------------------------------
        function [AccuracyOutput]=getAccuracyOutput(obj)
            AccuracyOutput = obj.AccuracyOutput;
        end
        % ----------------------------------------------------------------
        function [ShowBounds]=getShowBounds(obj)
            ShowBounds = obj.ShowBounds;
        end
        % ----------------------------------------------------------------
        function [CR]=getCR(obj)
            nObj = length(obj.KrigingObjectTypes);
            CR = ones(nObj,1);
            for iKrigingObject = 1 :  length(obj.KrigingObjectTypes)
                CR=obj.KrigingObjects{iKrigingObject}.getCR; 
            end
        end
        % ----------------------------------------------------------------
        function [KrigingPrediction_InterpolationCell]=getKrigingPrediction(obj,KrigingObjectIndex,InterpolationType)
            % [KrigingPrediction_InterpolationCell]=getKrigingPrediction(obj,KrigingObjectIndex,InterpolationType)
            %
            % KrigingPrediction_Interpolation2D/3D is a cell. The 1st column
            % contains a matrix with the prediciton results, the 2nd column
            % containts a matrix with the values of the inputs which are
            % used for the prediction, the 3rd cell contains the indices of
            % the analyzed input variable. The prediction maxtrix itself
            % has 2 column where the 1st column contains the actual
            % prediction value and the 2nd column contains the estimated
            % error variance. In case of InterpolationType=4, the 4th
            % column contains the unique value of the individual input
            % variables
            %
            % Input:
            % KrigingObjectIndex ... index of the kriging object which should
            %                        be used in this function.
            % - InterpolationType ... defines which function was used for
            %                         calculating the interpolation
            %       2 ... calcInterpolation_2D
            %       3 ... calcInterpolation_3D
            %       4 ... calcInterpolation_nD
            % 
            switch InterpolationType
                case 2
                    KrigingPrediction_InterpolationCell = {obj.KrigingPrediction_Interpolation2D{KrigingObjectIndex,:}};
                case 3
                    KrigingPrediction_InterpolationCell = {obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,:}};
                case 4
                    KrigingPrediction_InterpolationCell = {obj.KrigingPrediction_InterpolationnD{KrigingObjectIndex,:}};
                otherwise
                    error('InterpolationType %i is not allowed',InterpolationType)
            end
        end
        % ----------------------------------------------------------------
        function [ShowData]=getShowData(obj)
            ShowData = obj.ShowData;
        end
        % ----------------------------------------------------------------
        function [Generations]=getGenerations(obj)
            nObj = length(obj.KrigingObjectTypes);
            Generations = ones(nObj,1);
            for iKrigingObject = 1 :  length(obj.KrigingObjectTypes)
                Generations=obj.KrigingObjects{iKrigingObject}.getGenerations; 
            end
        end
        % ----------------------------------------------------------------
        function [TimeLimit]=getTimeLimit(obj)
            nObj = length(obj.KrigingObjectTypes);
            TimeLimit = ones(nObj,1);
            for iKrigingObject = 1 :  length(obj.KrigingObjectTypes)
                TimeLimit=obj.KrigingObjects{iKrigingObject}.getTimeLimit; 
            end
        end
        % ----------------------------------------------------------------
        function [PopulationSize]=getPopulationSize(obj)
            nObj = length(obj.KrigingObjectTypes);
            PopulationSize = ones(nObj,1);
            for iKrigingObject = 1 :  length(obj.KrigingObjectTypes)
                PopulationSize=obj.KrigingObjects{iKrigingObject}.getPopulationSize; 
            end
        end
        % ----------------------------------------------------------------
        function [PopInitMatrix]=getPopInitMatrix(obj)
            nObj = length(obj.KrigingObjectTypes);
            PopInitMatrix = ones(nObj,1);
            for iKrigingObject = 1 :  length(obj.KrigingObjectTypes)
                PopInitMatrix=obj.KrigingObjects{iKrigingObject}.getPopulationSize; 
            end
        end
        % ----------------------------------------------------------------
        function [ShowDetails]=getShowDetails(obj)
            nObj = length(obj.KrigingObjectTypes);
            ShowDetails = ones(nObj,1);
            for iKrigingObject = 1 :  length(obj.KrigingObjectTypes)
                ShowDetails=obj.KrigingObjects{iKrigingObject}.getShowDetails; 
            end
        end
        %------------------------------------------------------------------
        function [ShowParetoRectangles]=getShowParetoRectangles(obj)
            ShowParetoRectangles = obj.ShowParetoRectangles;
        end
        %------------------------------------------------------------------
        function [WriteNumbers]=getWriteNumbers(obj)
            WriteNumbers = obj.WriteNumbers;
        end
        %------------------------------------------------------------------
        function [nPlots]=getnPlots(obj)
            nPlots = obj.nPlots;
        end
        %------------------------------------------------------------------
        function [ShowColorBar]=getShowColorBar (obj)
            ShowColorBar = obj.ShowColorBar;
        end
        %------------------------------------------------------------------
        function [NormColors]=getNormColors(obj)
            NormColors = obj.NormColors;
        end
        %------------------------------------------------------------------
        function [MinMax]=getMinMax(obj,KrigingObjectIndex)
            MinMax = obj.MinMax(KrigingObjectIndex);
        end
        %------------------------------------------------------------------
        function [LBInputVarInterpolation]=getLBInputVarInterpolation(obj)
            LBInputVarInterpolation = obj.LBInputVarInterpolation;
        end
        %------------------------------------------------------------------
        function [UBInputVarInterpolation]=getUBInputVarInterpolation(obj)
            UBInputVarInterpolation = obj.UBInputVarInterpolation;
        end
        %------------------------------------------------------------------
        %------------------------------------------------------------------
        function [MaxSizeOfPredictions]=getMaxSizeOfPredictions(obj)
            nObj = length(obj.KrigingObjectTypes);
            MaxSizeOfPredictions = ones(nObj,1);
            for iKrigingObject = 1 :  length(obj.KrigingObjectTypes)
                MaxSizeOfPredictions=obj.KrigingObjects{iKrigingObject}.getMaxSizeOfPredictions; 
            end
        end
        %------------------------------------------------------------------
        function [InputVarNames]=getInputVarNames(obj,KrigingIndex)
        % [InputVarNames]=getInputVarNames(obj,KrigingIndex)
            if exist('KrigingIndex','var')
                InputVarNames = obj.InputVarNames{KrigingIndex};
            else
                error('This get-function needs the index of the Kriging object as input')
            end
        end
        % ----------------------------------------------------------------
        function [nMinimumDataPoint]=getnMinimumDataPoint(obj)
            nMinimumDataPoint = obj.nMinimumDataPoint;
        end
        % ----------------------------------------------------------------
        function [ChosenCombinationsForPlot]=getChosenCombinationsForPlot(obj)
            ChosenCombinationsForPlot = obj.ChosenCombinationsForPlot;
        end
        % ----------------------------------------------------------------
        function [WidthConfidenceInterval]=getWidthConfidenceInterval(obj)
            WidthConfidenceInterval = obj.WidthConfidenceInterval;
        end
        % ----------------------------------------------------------------
        function [nNewSamples]=getnNewSamples(obj)
           nNewSamples = obj.nNewSamples;
        end
        % ----------------------------------------------------------------
        function [UseSolver]=getUseSolver(obj)
            UseSolver = obj.UseSolver;
        end
        % ----------------------------------------------------------------
        function [ReferencePoint]=getReferencePoint(obj)
            ReferencePoint = obj.ReferencePoint;
        end
        % ----------------------------------------------------------------
        function [FrameRate]=getFrameRate(obj)
            FrameRate = obj.FrameRate;
        end
        % ----------------------------------------------------------------
        function [nStepsBetweenBounds]=getnStepsBetweenBounds(obj)
            nStepsBetweenBounds = obj.nStepsBetweenBounds;
        end
        % ----------------------------------------------------------------
        function [FileName]=getFileName(obj)
            FileName = obj.FileName;
        end
        % ----------------------------------------------------------------
        function [ShowBasisFct]=getShowBasisFct(obj)
            ShowBasisFct = obj.ShowBasisFct;
        end
        % ----------------------------------------------------------------
        function [AlphaValue]=getAlphaValue(obj)
            AlphaValue = obj.AlphaValue;
        end
        % ----------------------------------------------------------------
        function [KrigingPrediction_Screening]=getKrigingPrediction_Screening(obj)
            KrigingPrediction_Screening = obj.KrigingPrediction_Screening;
        end
        % ----------------------------------------------------------------
        function [nContourLevels]=getnContourLevels(obj)
            nContourLevels = obj.nContourLevels;
        end
        % ----------------------------------------------------------------
        function [FontSize]=getFontSize(obj)
            FontSize = obj.FontSize;
        end
        % ----------------------------------------------------------------
        function [LeastSquareErrorBasisFctvsKriging]=getLeastSquareErrorBasisFctvsKriging(obj)
            LeastSquareErrorBasisFctvsKriging = obj.LeastSquareErrorBasisFctvsKriging;
        end
        % ----------------------------------------------------------------
        function [ANOVACoefficients]=getANOVACoefficients(obj)
            ANOVACoefficients = obj.ANOVACoefficients;
        end
        % ----------------------------------------------------------------
        function [ANOVACovMatrix]=getANOVACovMatrix(obj)
            ANOVACovMatrix = obj.ANOVACovMatrix;
        end
        % ----------------------------------------------------------------
        function [ANOVAStdOfCoefficients]=getANOVAStdOfCoefficients(obj)
            ANOVAStdOfCoefficients = obj.ANOVAStdOfCoefficients;
        end
        % ----------------------------------------------------------------
        function [ANOVATvalue]=getANOVATvalue(obj)
            ANOVATvalue = obj.ANOVATvalue;
        end
        % ----------------------------------------------------------------
        function [ANOVAPvalue]=getANOVAPvalue(obj)
            ANOVAPvalue = obj.ANOVAPvalue;
        end
        % ----------------------------------------------------------------
        function [OutsideOfConfi]=getOutsideOfConfi(obj)
            OutsideOfConfi = obj.OutsideOfConfi;
        end
        % ----------------------------------------------------------------
        function [nKrigingObjects]=getnKrigingObjects(obj)
            nKrigingObjects = length(obj.KrigingObjects);
        end
        %------------------------------------------------------------------
        function []=checknKrigingObjects(obj)
            obj.nKrigingObjects = length(obj.KrigingObjects);
        end
        % ----------------------------------------------------------------
        function [SuppressFigure]=getSuppressFigure(obj)
            SuppressFigure = obj.SuppressFigure;
        end
        % ----------------------------------------------------------------
        function [PotentialOutlier]=getPotentialOutlier(obj,KrigingIndex)
            PotentialOutlier = obj.PotentialOutlier{KrigingIndex};
        end
        % ----------------------------------------------------------------
        function [PotentialToBeOutlier]=getPotentialToBeOutlier(obj,KrigingIndex)
            PotentialToBeOutlier = obj.PotentialToBeOutlier{KrigingIndex};
        end
        % ----------------------------------------------------------------
        function [ShowOutlier]=getShowOutlier(obj)
            ShowOutlier = obj.ShowOutlier;
        end
        % ----------------------------------------------------------------
        function [PotentialOutlierBinary]=getPotentialOutlierBinary(obj)
            PotentialOutlierBinary = obj.PotentialOutlierBinary;
        end
        % ----------------------------------------------------------------
        function [DegreeOfExpectedImprovement]=getDegreeOfExpectedImprovement(obj)
            DegreeOfExpectedImprovement = obj.DegreeOfExpectedImprovement;
        end
        % ----------------------------------------------------------------
        function [SignificanceLevel]=getSignificanceLevel(obj)
            SignificanceLevel = obj.SignificanceLevel;
        end
        % ----------------------------------------------------------------
        function [ParetoSetExperiments]=getParetoSetExperiments(obj)
            ParetoSetExperiments = obj.ParetoSetExperiments;
        end
        % ----------------------------------------------------------------
        function [nParetoSetExperiments]=getnParetoSetExperiments(obj)
            nParetoSetExperiments  = obj.nParetoSetExperiments ;
        end
        % ----------------------------------------------------------------
        function [ParetoValuesInput]=getParetoValuesInput(obj)
            ParetoValuesInput  = obj.ParetoValuesInput;
        end
        % ----------------------------------------------------------------
        function [ReferencePointHyperVolume]=getReferencePointHyperVolume(obj)
             ReferencePointHyperVolume = obj.ReferencePointHyperVolume;
        end
        % ----------------------------------------------------------------
        function [GlobalParetoUncertainity]=getGlobalParetoUncertainity(obj)
            GlobalParetoUncertainity = obj.GlobalParetoUncertainity;
        end
        % ----------------------------------------------------------------
        function [GlobalParetoUncertainityNorm]=getGlobalParetoUncertainityNorm(obj)
            GlobalParetoUncertainityNorm = obj.GlobalParetoUncertainityNorm;
        end
        % ----------------------------------------------------------------
        function [nMCMCLinksEI] = getnMCMCLinksEI(obj)
            nMCMCLinksEI = obj.nMCMCLinksEI;
        end
        % ----------------------------------------------------------------
        function [UseDataPointsAsComparisonPoint] = getUseDataPointsAsComparisonPoint(obj)
            UseDataPointsAsComparisonPoint = obj.UseDataPointsAsComparisonPoint;
        end
        % -----------------------------------------------------------------
        function [ColormapToolbox] = getColormapToolbox(obj)
            ColormapToolbox = obj.ColormapToolbox ;
        end
        % ----------------------------------------------------------------
        function [PlottingRange]=getPlottingRange(obj)
            PlottingRange = obj.PlottingRange;
        end
        % ----------------------------------------------------------------
        function [RepeatDesign] = getRepeatDesign(obj)
            RepeatDesign = obj.RepeatDesign;
        end
        % ----------------------------------------------------------------
        function [ThresholdQuantile] = getThresholdQuantile(obj)
            ThresholdQuantile = obj.ThresholdQuantile;
        end
        %% Set Functions
        function []=setAccuracy(obj,Accuracy)
            if any(size(Accuracy)>1)
                error('Accuracy has to be a scalar')
            end
            obj.Accuracy = Accuracy;
        end
        % ----------------------------------------------------------------
        function []=setAccuracyOutput(obj,AccuracyOutput)
            if any(size(AccuracyOutput)>1)
                error('AccuracyOutput has to be a scalar')
            end
            obj.AccuracyOutput = AccuracyOutput;
        end
        % ----------------------------------------------------------------
        function []=setShowBounds(obj,ShowBounds)
            if ~islogical(ShowBounds)
                error('ShowBounds has to be logical')
            end
            obj.ShowBounds = ShowBounds;
        end
        % ----------------------------------------------------------------
        function []=setShowData(obj,ShowData)
            if ~islogical(ShowData)
                error('ShowData has to be logical')
            end
            obj.ShowData = ShowData;
        end
        %------------------------------------------------------------------
        function []=setCR(obj,CR)
            for iKrigingObject = 1 :  length(obj.KrigingObjectTypes)
                obj.KrigingObjects{iKrigingObject}.setCR(CR); 
            end
        end
        %------------------------------------------------------------------
        function []=setGenerations(obj,Generations)
            if Generations<0
                error('Generations must be positive')
            end
            
            for iKrigingObject = 1 :  length(obj.KrigingObjectTypes)
                obj.KrigingObjects{iKrigingObject}.setGenerations(Generations); 
            end
        end
        %------------------------------------------------------------------
        function []=setShowWaitingBar(obj,showWaitingBar)
            if ~islogical(showWaitingBar)
                error('showWaitingBar must be boolean')
            end
            
            for iKrigingObject = 1 :  length(obj.KrigingObjectTypes)
                obj.KrigingObjects{iKrigingObject}.setShowWaitingBar(showWaitingBar); 
            end
        end
        %------------------------------------------------------------------
        function []=setUseInverse(obj,UseInverse)
            if ~islogical(UseInverse)
                error('UseInverse must be boolean')
            end
            
            for iKrigingObject = 1 :  length(obj.KrigingObjectTypes)
                obj.KrigingObjects{iKrigingObject}.setUseInverse(UseInverse); 
            end
        end
        %------------------------------------------------------------------
        function []=setTimeLimit(obj,TimeLimit)
            if TimeLimit<0
                error('TimeLimit must be positive')
            end
            
            for iKrigingObject = 1 :  length(obj.KrigingObjectTypes)
                obj.KrigingObjects{iKrigingObject}.setTimeLimit(TimeLimit); 
            end
        end
        %------------------------------------------------------------------
        function []=setPopulationSize(obj,PopulationSize)
            if PopulationSize<0
                error('PopulationSize must be positive')
            end
            
            for iKrigingObject = 1 :  length(obj.KrigingObjectTypes)
                obj.KrigingObjects{iKrigingObject}.setPopulationSize(PopulationSize); 
            end
        end
        %------------------------------------------------------------------
        function []=setPopInitMatrix(obj,PopInitMatrix)
            for iKrigingObject = 1 :  length(obj.KrigingObjectTypes)
                obj.KrigingObjects{iKrigingObject}.setPopInitMatrix(PopInitMatrix); 
            end
        end
        %------------------------------------------------------------------
        function []=setShowDetails(obj,ShowDetails)
            for iKrigingObject = 1 :  length(obj.KrigingObjectTypes)
                obj.KrigingObjects{iKrigingObject}.setShowDetails(ShowDetails); 
            end
        end
        %------------------------------------------------------------------
        function []=setShowParetoRectangles(obj,ShowParetoRectangles)
            obj.ShowParetoRectangles = ShowParetoRectangles;
        end
        %------------------------------------------------------------------
        function []=setWriteNumbers(obj,WriteNumbers)
            obj.WriteNumbers = WriteNumbers ;
        end
        %------------------------------------------------------------------
        function []=setnPlots(obj,nPlots)
            obj.nPlots = nPlots;
        end
        %------------------------------------------------------------------
        function []=setShowColorBar (obj,ShowColorBar)
            if ~islogical(ShowColorBar)
                error('ShowColorBar should be logical')
            end
            obj.ShowColorBar = ShowColorBar ;
        end
        %------------------------------------------------------------------
        function []=setNormColors(obj,NormColors)
            if ~islogical(NormColors)
                error('NormColors should be logical')
            end
            obj.NormColors = NormColors;
        end
        %------------------------------------------------------------------
        function []=setMinMax(obj,KrigingObjectIndex,MinMax)
            obj.MinMax(KrigingObjectIndex) = MinMax;
        end
        
        %------------------------------------------------------------------
        function []=setLBInputVarInterpolation(obj,KrigingObjectIndex,LBInputVarInterpolation)
            % setLBInputVarInterpolation(KrigingObjectIndex,LBInputVarInterpolation)
            setLBUBInputVarInterpolation(obj,KrigingObjectIndex,LBInputVarInterpolation,-1)
        end
        
        %------------------------------------------------------------------
        function []=setUBInputVarInterpolation(obj,KrigingObjectIndex,UBInputVarInterpolation)
            % setUBInputVarInterpolation(KrigingObjectIndex,LBInputVarInterpolation)
            setLBUBInputVarInterpolation(obj,KrigingObjectIndex,UBInputVarInterpolation,1)
        end
        
        %------------------------------------------------------------------
        function []=setMaxSizeOfPredictions(obj,MaxSizeOfPredictions)
%             obj.MaxSizeOfPredictions = MaxSizeOfPredictions;
            for iKrigingObject = 1 :  length(obj.KrigingObjectTypes)
                obj.KrigingObjects{iKrigingObject}.setMaxSizeOfPredictions(MaxSizeOfPredictions); 
            end
        end
        %------------------------------------------------------------------
        function []=setInputVarNames(obj,KrigingIndex,InputVarNames)
            if iscell(InputVarNames)&&length(InputVarNames)~=obj.KrigingObjects{KrigingIndex}.getnInputVar
                error('InputVarNames should be of size nInputVar(=%i) x 1 but it is %i x %i',...
                    obj.KrigingObjects{KrigingIndex}.getnInputVar,size(InputVarNames,1),size(InputVarNames,2))
            elseif ischar(InputVarNames)
                InputVarNames = {InputVarNames};
            end
            if ~(iscell(InputVarNames)||iscell(InputVarNames))
                error('InputVarNames should be a string (array)')
            end 
            obj.InputVarNames{KrigingIndex} = InputVarNames;
        end
        % ----------------------------------------------------------------
        function []=setKrigingObjectNames(obj,KrigingObjectIndex,KrigingObjectNames)
            if ischar(KrigingObjectNames)&&length(KrigingObjectIndex)==1
                obj.KrigingObjectNames{KrigingObjectIndex}=KrigingObjectNames;
            else
                iName = 1;
                for iKrigingObject = KrigingObjectIndex
                    obj.KrigingObjectNames{iKrigingObject}=KrigingObjectNames{iName};
                    iName = iName+1;
                end
            end
        end
        % ----------------------------------------------------------------
        function []=setnMinimumDataPoint(obj,nMinimumDataPoint)
            obj.nMinimumDataPoint = nMinimumDataPoint;
        end
        % ----------------------------------------------------------------
        function []=setWidthConfidenceInterval(obj,WidthConfidenceInterval)
            if WidthConfidenceInterval<0
                error('"WidthConfidenceInterval" must be positive')
            end
            obj.WidthConfidenceInterval = WidthConfidenceInterval;
        end
        % ----------------------------------------------------------------
        function []=setnNewSamples(obj,nNewSamples)
            obj.nNewSamples = nNewSamples;
        end
        % ----------------------------------------------------------------
        function []=setUseSolver(obj,UseSolver)
            for iKrigingObject = 1 :  length(obj.KrigingObjectTypes)
                obj.KrigingObjects{iKrigingObject}.setUseSolver(UseSolver); 
            end
            obj.UseSolver = UseSolver;
        end
        % ----------------------------------------------------------------
        function []=setReferencePoint(obj,ReferencePoint)
            obj.ReferencePoint = ReferencePoint;
        end
        % ----------------------------------------------------------------
        function []=setFrameRate(obj,FrameRate)
            obj.FrameRate= FrameRate;
        end
        % ----------------------------------------------------------------
        function []=setnStepsBetweenBounds(obj,nStepsBetweenBounds)
            obj.nStepsBetweenBounds = nStepsBetweenBounds;
        end
        % ----------------------------------------------------------------
        function []=setFileName(obj,FileName)
            if ~ischar(FileName)
                error('"FileName" should be a string')
            end
            obj.FileName = FileName;
        end
        % ----------------------------------------------------------------
        function []=setPlottingRange(obj,PlottingRange)
            if length(PlottingRange)~=2&&~isempty(PlottingRange)
                error('"PlottingRange" should be 1X2-Array')
            end
            obj.PlottingRange = PlottingRange;
        end
        % ----------------------------------------------------------------
        function []=setShowBasisFct(obj,ShowBasisFct)
            obj.ShowBasisFct = ShowBasisFct;
        end
        % ----------------------------------------------------------------
        function []=setAlphaValue(obj,AlphaValue)
            obj.AlphaValue = AlphaValue;
        end
        % ----------------------------------------------------------------
        function []=setnContourLevels(obj,nContourLevels)
            obj.nContourLevels = nContourLevels;
        end
        % ----------------------------------------------------------------
        function []=setFontSize(obj,FontSize)
            obj.FontSize = FontSize;
        end
        % ----------------------------------------------------------------
        function []=setOutsideOfConfi(obj,OutsideOfConfi)
            obj.OutsideOfConfi = OutsideOfConfi;
        end
        % ----------------------------------------------------------------
        function []=setSuppressFigure(obj,SuppressFigure)
            obj.SuppressFigure = SuppressFigure;
        end
        % ----------------------------------------------------------------
        function []=setPotentialOutlier(obj,KrigingIndex,PotentialOutlier)
            obj.PotentialOutlier{KrigingIndex} = PotentialOutlier;
        end
        % ----------------------------------------------------------------
        function []=setPotentialToBeOutlier(obj,KrigingIndex,PotentialToBeOutlier)
            obj.PotentialToBeOutlier= PotentialToBeOutlier{KrigingIndex};
        end
        % ----------------------------------------------------------------
        function []=setShowOutlier(obj,ShowOutlier)
            obj.ShowOutlier = ShowOutlier;
        end
        % ----------------------------------------------------------------
        function []=setDegreeOfExpectedImprovement(obj,DegreeOfExpectedImprovement)
            if DegreeOfExpectedImprovement<0
                error('DegreeOfExpectedImprovement has to be >=0')
            end
            obj.DegreeOfExpectedImprovement = DegreeOfExpectedImprovement;
        end
        % ----------------------------------------------------------------
        function []=setSignificanceLevel(obj,SignificanceLevel)
            if SignificanceLevel<0||SignificanceLevel>1
                error('SignificanceLevel should be between 0 and 1')
            end
            obj.SignificanceLevel = SignificanceLevel;
        end
        % ----------------------------------------------------------------
        function []=setReferencePointHyperVolume(obj,ReferencePointHyperVolume)
            obj.ReferencePointHyperVolume = ReferencePointHyperVolume;
        end
        % ----------------------------------------------------------------
        function []=setGlobalParetoUncertainity(obj,GlobalParetoUncertainity)
            obj.GlobalParetoUncertainity = GlobalParetoUncertainity;
        end
        % ----------------------------------------------------------------
        function []=setGlobalParetoUncertainityNorm(obj,GlobalParetoUncertainityNorm)
            obj.GlobalParetoUncertainityNorm = GlobalParetoUncertainityNorm;
        end
        % ----------------------------------------------------------------
        function [] = setnMCMCLinksEI(obj,nMCMCLinksEI)
            if nMCMCLinksEI<=0||mod(nMCMCLinksEI,1)~=0
                error('nMCMCLinksEI has an positive integer bigger than 0')
            end
            obj.nMCMCLinksEI = nMCMCLinksEI;
        end
        % ----------------------------------------------------------------
        function [] = setUseDataPointsAsComparisonPoint(obj,UseDataPointsAsComparisonPoint)
            if ~islogical(UseDataPointsAsComparisonPoint)
                error('UseDataPointsAsComparisonPoint must be logical')
            end
            obj.UseDataPointsAsComparisonPoint = UseDataPointsAsComparisonPoint;
        end
        % -----------------------------------------------------------------
        function [] = setScaleFactorMutalPrediction(obj,ScaleFactorMutalPrediction)
            if ~(ScaleFactorMutalPrediction>=0&&ScaleFactorMutalPrediction<=1)
                error('ScaleFactorMutalPrediction has to be a number between 0 and 1')
            end
            obj.ScaleFactorMutalPrediction = ScaleFactorMutalPrediction;
        end
        % -----------------------------------------------------------------
        function [] = setColormapToolbox(obj,varargin)
            % Set color map. if "ColormapToolbox" is empty, default
            % colormap is created
            
            % Check input
            if isempty(varargin)||isempty(varargin{1})
                obj.ColormapToolbox = load('ColormapWinterInverse.txt');
                return;
            elseif strcmp(varargin{1},'FZJ')
                obj.ColormapToolbox = load('ColormapFZJ.txt');
                return;
            end
            
            if size(varargin{1},2)~=3&&~ischar(varargin{1})
                error('ColormapToolbox must have three columns')
            end
            
            obj.ColormapToolbox = varargin{1};
        end
        % ----------------------------------------------------------------
        function [] = setRepeatDesign(obj,RepeatDesign)
            if ~islogical(RepeatDesign)
                error('RepeatDesign must be logical')
            end
            obj.RepeatDesign = RepeatDesign;
        end
        % ----------------------------------------------------------------
        function [] = setThresholdQuantile(obj,ThresholdQuantile)
            obj.ThresholdQuantile = ThresholdQuantile;
        end
        
    end
    
end

% =============================================================================
%  KriKit - Kriging toolKit
%  
%  Copyright 2014-2016: Lars Freier(1), Eric von Lieres(1)
%                                      
%    (1)Forschungszentrum Juelich GmbH, IBG-1, Juelich, Germany.
%  
%  All rights reserved. This program and the accompanying materials
%  are made available under the terms of the GNU Public License v3.0 (or, at
%  your option, any later version) which accompanies this distribution, and
%  is available at http://www.gnu.org/licenses/gpl.html
% =============================================================================
