function [] = plotInterpolation_23D(obj,varargin)
% []=plotInterpolation_23D(KrigingObjectIndex,dimensionInterpolation)
%
% Creates a 2D or 3D plot using the interpolation data and information
% generated by "calcInterpoaltion()"
%
% Input: 
% KrigingObjectIndex ... index of Kriging Object(s) used when
%                        "calcInterpoaltion()" was called
% dimensionInterpolation ... decision if 2D or 3D interpolation shall be
%                            created. dimensionInterpolation has to be
%                            consistent with the call of
%                            "calcMutualInterpolation_23D()" 
%
% You can set:
% - ShowBounds ... If true, the confidence interval is displayed. Width of
%                  confidence interval depends on value of
%                  "WidthConfidenceInterval"
% - WidthConfidenceInterval ... width of the confidence interval:
%   KrigingPrediction +(-) WidthConfidenceInterval*KrigingStandardDeviation
% - ShowData ... If true, provided data points are visualized in the plot
% - SuppressFigure ... If true, figure is hidden
% - ColormapToolbox ... colormap used for plots. By default, reverse winter
%                       colormap
%
% You can get: -
%
% For triangular plotting the Ternplot package was used available at 
% http://www.mathworks.com/matlabcentral/fileexchange/2299-ternploton
% Acces Date (02-02-2016)
%
% Copyright 2014-2016: Lars Freier, Eric von Lieres
% See the license note at the end of the file.

KrigingObjectIndex = varargin{1};
dimensionInterpolation = varargin{2};

% In case of mutual Kriging interpolation, the prediction of all objects is
% saved redundant, such that only the first index should be used
KrigingObjectIndex = obj.checkKrigingIndizes(KrigingObjectIndex);
KrigingObjectIndexArray = KrigingObjectIndex;
KrigingObjectIndex = KrigingObjectIndexArray(1);


% Get data and rescale if neccesary
switch dimensionInterpolation
    case 2
        prediction = obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,1}(:,1);
    case 3
        prediction = obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,1}(:,1);
        LB = prediction-obj.getWidthConfidenceInterval*obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,1}(:,2);
        UB = prediction+obj.getWidthConfidenceInterval*obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,1}(:,2);
    otherwise
            error('Plotting function is only allowed for 2D and 3D interpolation')
end

if obj.getSuppressFigure==1
    figure('Visible','off')
else
    figure()
end
hold on

switch dimensionInterpolation
    case 2
        ternpcolor(obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,2}(:,obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,3}(1)),...
             obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,2}(:,obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,3}(2)),...
             obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,2}(:,obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,3}(3)),...
             prediction)
    case 3
        ternsurf(obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,2}(:,obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,3}(1)),...
             obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,2}(:,obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,3}(2)),...
             obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,2}(:,obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,3}(3)),...
             prediction)
    otherwise
            error('Plotting function is only allowed for 2D and 3D interpolation')
end

% Plot lower and upper bound
if obj.getShowBounds==1

    switch dimensionInterpolation
        case 2
        case 3
            % LB
             ternsurf(obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,2}(:,obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,3}(1)),...
                      obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,2}(:,obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,3}(2)),...
                      obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,2}(:,obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,3}(3)),...
                      LB)

             % UB
             ternsurf(obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,2}(:,obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,3}(1)),...
                      obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,2}(:,obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,3}(2)),...
                      obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,2}(:,obj.KrigingPrediction_Interpolation3D{KrigingObjectIndex,3}(3)),...
                      UB)
        otherwise
                error('Plotting function is only allowed for 2D and 3D interpolation')
    end

end

% Plot provided Data
if obj.getShowData==1
    for iKrigingObject=KrigingObjectIndexArray'

        % In case of Mixture there are always three variable (last argument=3)
        [Data,dataShown,OutlierShown]=obj.determineRelevantDataPointsForPlot(iKrigingObject,3);

        % Copy Output Data
        OutputData = obj.KrigingObjects{iKrigingObject}.getOutputData;

        switch dimensionInterpolation
            case 2
                ternplot(Data(dataShown,obj.KrigingPrediction_Interpolation3D{iKrigingObject,3}(1)),...
                        Data(dataShown,obj.KrigingPrediction_Interpolation3D{iKrigingObject,3}(2)),...
                        [],...
                        'ko','MarkerFaceColor',[255/255 102/255 0/255]); 


                ternplot(Data(OutlierShown,obj.KrigingPrediction_Interpolation3D{iKrigingObject,3}(1)),...
                        Data(OutlierShown,obj.KrigingPrediction_Interpolation3D{iKrigingObject,3}(2)),...
                        [],...
                        'ko','MarkerFaceColor','k'); 
            case 3
                ternplot3(Data(dataShown,obj.KrigingPrediction_Interpolation3D{iKrigingObject,3}(1)),...
                        Data(dataShown,obj.KrigingPrediction_Interpolation3D{iKrigingObject,3}(2)),...
                        Data(dataShown,obj.KrigingPrediction_Interpolation3D{iKrigingObject,3}(3)),...
                        OutputData(dataShown),...
                        'ko','MarkerFaceColor',[255/255 102/255 0/255]); 
                grid on


                ternplot3(Data(OutlierShown,obj.KrigingPrediction_Interpolation3D{iKrigingObject,3}(1)),...
                        Data(OutlierShown,obj.KrigingPrediction_Interpolation3D{iKrigingObject,3}(2)),...
                        Data(OutlierShown,obj.KrigingPrediction_Interpolation3D{iKrigingObject,3}(3)),...
                        OutputData(OutlierShown),...
                        'ko','MarkerFaceColor','k'); 
                grid on

            otherwise
                error('Plotting function is only allowed for 2D and 3D interpolation')
        end
    end
end

obj.labelPlots_23D(KrigingObjectIndex,dimensionInterpolation)

% Set transparency
alpha(obj.getAlphaValue)

% Set Colormap
colormap(gcf,obj.ColormapToolbox);

end
% =============================================================================
%  KriKit - Kriging toolKit
%  
%  Copyright 2014-2016: Lars Freier(1), Eric von Lieres(1)
%                                      
%    (1)Forschungszentrum Juelich GmbH, IBG-1, Juelich, Germany.
%  
%  All rights reserved. This program and the accompanying materials
%  are made available under the terms of the GNU Public License v3.0 (or, at
%  your option, any later version) which accompanies this distribution, and
%  is available at http://www.gnu.org/licenses/gpl.html
% =============================================================================
